package com.cp.project.demo.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;

import com.cp.project.demo.model.forRoom.Room;

import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@Service
public class WebClientRoomService {
	
	@Autowired
	WebClient webClient;
	
	public WebClientRoomService(WebClient webClient) {
		this.webClient = webClient;
	}
	
	public Flux<Room> getAllRoom() {
		return webClient.get().uri("/room").retrieve().bodyToFlux(Room.class);
	}
	
	public Mono<Room> getRoomById(Integer roomId) {
	    return webClient.get()
	        .uri("/room/{id}", roomId)
	        .retrieve()
	        .bodyToMono(Room.class);
	}

	
		public Mono<Room> addRoom(Room room) {
		    return webClient.post()
		        .uri("/room")
		        .bodyValue(room)
		        .retrieve()
		        .bodyToMono(Room.class);
		}
		
		public Mono<Room> getRoomById(Integer roomId) {
			return getAllRoom()
					.filter(room -> room.getRoomId().equalsIgnoreCase(roomId))
					.singleOrEmpty()
					.doOnSubscribe(subscription -> System.out.println("Fetching room with id: " + roomId))
					.doOnError(error -> System.out.println("Error fetching room: ") + err.getMessage()));
		}
	
	public Flux<Room> updateRoomPriceByType(String roomType, Double newPrice) {
        return webClient.put()
                .uri(uriBuilder -> uriBuilder
                        .path("/update/price")
                        .queryParam("roomType", roomType)
                        .queryParam("newPrice", newPrice)
                        .build())
                .retrieve()
                .bodyToFlux(Room.class);
    }
 }
