package com.cp.project.demo.service;

import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.cp.project.demo.model.forBooking.Booking;
import com.cp.project.demo.model.forBooking.ConcreteBookingBuilder;
import com.cp.project.demo.model.forRoom.Room;
import com.cp.project.demo.model.forUser.User;
import com.cp.project.demo.repository.BookingRepository;
import com.cp.project.demo.repository.RoomRepository;
import com.cp.project.demo.repository.UserRepository;

@Service
public class BookingService {
	@Autowired
	private BookingRepository bookingRepo;
	
	@Autowired
	private RoomRepository roomRepo;
	
	@Autowired
	private UserRepository userRepo;

	public List<Booking> getAllBooking() {
		return (List<Booking>) bookingRepo.findAll();
	}

	public Booking getBookingById(Integer id) {
		return bookingRepo.findById(id).orElseThrow(() -> new RuntimeException("error bro id not found!!!"));
	}

	public Booking createBooking(String roomType, Integer id, String paymentType, Date checkinDate,
			Date checkoutDate) {
		User user = userRepo.findById(id).orElseThrow(() -> new RuntimeException("error bro id not found!!!"));
		
		List<Room> listRoom = roomRepo.findByRoomType(roomType);
		List<Room> listAvailableRoom = listRoom.stream().filter(roomm -> "Available".equals(roomm.getRoomStatus()))
				.collect(Collectors.toList());
		Room firstRoom=null;
		if (!listAvailableRoom.isEmpty()) {
			firstRoom = listAvailableRoom.get(0);
		} else {
			System.out.println("No available room found");
		}
		
		ConcreteBookingBuilder builder = new ConcreteBookingBuilder();
		Booking booking = null;
		long differenceInMillies = checkoutDate.getTime() - checkinDate.getTime();
	    Double differenceInDays = (double) differenceInMillies / (1000 * 60 * 60 * 24);
	    Double totalPrice = firstRoom.getRoomPrice() * differenceInDays;
		if(paymentType.equals("Cash")) {
			 booking = builder.setRoom(firstRoom)
					.setUser(user)
					.setPaymentType(paymentType)
					.setBookingDate(new Date())
					.setCheckinDate(checkinDate)
					.setCheckoutDate(checkoutDate)
					.setStatus("Waiting pay")
					.setTotalPrice(totalPrice).build();
		}else if(paymentType.equals("CreditCard")) {
			 booking = builder.setRoom(firstRoom)
					.setUser(user)
					.setPaymentType(paymentType)
					.setBookingDate(new Date())
					.setCheckinDate(checkinDate)
					.setCheckoutDate(checkoutDate)
					.setStatus("payed")
					.setTotalPrice(totalPrice).build();
		}
		firstRoom.setRoomStatus("Unavailable");
		return bookingRepo.save(booking);

	}

}
