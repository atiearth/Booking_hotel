package com.cp.project.demo.service;

import java.time.LocalDate;
import java.time.ZoneId;
import java.time.temporal.ChronoUnit;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.cp.project.demo.model.forBooking.Booking;
import com.cp.project.demo.model.forBooking.ConcreteBookingBuilder;
import com.cp.project.demo.model.forRoom.Room;
import com.cp.project.demo.model.forUser.User;
import com.cp.project.demo.repository.BookingRepository;
import com.cp.project.demo.repository.RoomRepository;
import com.cp.project.demo.repository.UserRepository;

import jakarta.transaction.Transactional;

@Service
@Transactional
public class BookingService {
	@Autowired
	private BookingRepository bookingRepo;

	@Autowired
	private RoomRepository roomRepo;

	@Autowired
	private UserRepository userRepo;

	public List<Booking> getAllBooking() {
		return (List<Booking>) bookingRepo.findAll();
	}

	public Booking getBookingById(Integer id) {
		return bookingRepo.findById(id).orElseThrow(() -> new RuntimeException("error bro id not found!!!"));
	}

	public Booking createBooking(String roomType, Integer id, String paymentType, LocalDate checkinDate,
			LocalDate checkoutDate) {
// ค้นหา User จาก id
		User user = userRepo.findById(id).orElseThrow(() -> new RuntimeException("error bro id not found!!!"));

// ค้นหา Room ตาม roomType
		List<Room> listRoom = roomRepo.findByRoomType(roomType);
		List<Room> listAvailableRoom = listRoom.stream().filter(roomm -> "Available".equals(roomm.getRoomStatus()))
				.collect(Collectors.toList());
		Room firstRoom = null;
		if (!listAvailableRoom.isEmpty()) {
			firstRoom = listAvailableRoom.get(0);
		} else {
			System.out.println("No available room found");
		}

		ConcreteBookingBuilder builder = new ConcreteBookingBuilder();
		Booking booking = null;

// คำนวณจำนวนวันที่แตกต่างกันระหว่าง checkinDate และ checkoutDate
		long differenceInDays = ChronoUnit.DAYS.between(checkinDate, checkoutDate);

// คำนวณราคาห้องพักทั้งหมด
		Double totalPrice = firstRoom.getRoomPrice() * differenceInDays;

// สร้าง Booking โดยขึ้นอยู่กับประเภทการชำระเงิน
		if (paymentType.equals("Cash")) {
			booking = builder.setRoom(firstRoom).setUser(user).setPaymentType(paymentType)
					.setBookingDate(LocalDate.now()) // วันที่การจอง
					.setCheckinDate(checkinDate) // วันที่เข้าพัก
					.setCheckoutDate(checkoutDate) // วันที่ออก
					.setStatus("Waiting pay") // สถานะการจอง
					.setTotalPrice(totalPrice) // ราคาทั้งหมด
					.build();
		} else if (paymentType.equals("CreditCard")) {
			booking = builder.setRoom(firstRoom).setUser(user).setPaymentType(paymentType)
					.setBookingDate(LocalDate.now()) // วันที่การจอง
					.setCheckinDate(checkinDate) // วันที่เข้าพัก
					.setCheckoutDate(checkoutDate) // วันที่ออก
					.setStatus("payed") // สถานะการจอง
					.setTotalPrice(totalPrice) // ราคาทั้งหมด
					.build();
		}

// เปลี่ยนสถานะห้องเป็น "Unavailable"
		firstRoom.setRoomStatus("Unavailable");

// บันทึกข้อมูลการจอง
		return bookingRepo.save(booking);
	}

}
