package com.cp.project.demo.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;

import com.cp.project.demo.model.forBooking.Booking;
import com.cp.project.demo.model.forUser.User;

import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@Service
public class WebClientBookingService {
	
	@Autowired
	WebClient webClient;
	
	public WebClientBookingService(WebClient webClient) {
		this.webClient = webClient;
	}
	
	public Flux<Booking> getAllBooking() {
		return webClient.get().uri("/booking").retrieve().bodyToFlux(Booking.class);
	}
	
	public Mono<Booking> getBookingById(Integer id) {
		return webClient.get().uri("/booking/{id}", id).retrieve().bodyToMono(Booking.class);
	}
	
	public Mono<Booking> createBooking(Booking booking) {
		System.out.println("Booking Details: " + booking);
		if (booking.getRoom() == null) {
		    System.out.println("Room is null in Booking");
		}
		if (booking.getUser() == null) {
		    System.out.println("User is null in Booking");
		}
	    return webClient.post()
	            .uri("/booking/create")
	            .bodyValue(booking)
	            .retrieve()
	            .onStatus(status -> status.is4xxClientError(), clientResponse -> {
                    return Mono.error(new RuntimeException("Client error"));
                }).onStatus(status -> status.is5xxServerError(), clientResponse -> {
                    return Mono.error(new RuntimeException("Server error"));
                }).bodyToMono(Booking.class)
                .doOnNext(savedBooking -> System.out.println("Booking created: " + savedBooking))
                .doOnError(error -> System.err.println("Error creating booking: " + error.getMessage()));
	}

}