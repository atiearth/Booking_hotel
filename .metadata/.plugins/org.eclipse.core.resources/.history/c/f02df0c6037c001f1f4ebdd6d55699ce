package com.cp.project.demo.service;

import java.time.LocalDate;
import java.time.ZoneId;
import java.time.temporal.ChronoUnit;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.cp.project.demo.model.forBooking.Booking;
import com.cp.project.demo.model.forBooking.ConcreteBookingBuilder;
import com.cp.project.demo.model.forRoom.Room;
import com.cp.project.demo.model.forUser.User;
import com.cp.project.demo.repository.BookingRepository;
import com.cp.project.demo.repository.RoomRepository;
import com.cp.project.demo.repository.UserRepository;

import jakarta.transaction.Transactional;

@Service
public class BookingService {
	@Autowired
	private BookingRepository bookingRepo;

	@Autowired
	private RoomRepository roomRepo;

	@Autowired
	private UserRepository userRepo;

	public List<Booking> getAllBooking() {
		return (List<Booking>) bookingRepo.findAll();
	}

	public Booking getBookingById(Integer id) {
		return bookingRepo.findById(id).orElseThrow(() -> new RuntimeException("error bro id not found!!!"));
	}

	@Transactional
	public Booking createBooking(String roomType, Integer id, String paymentType, LocalDate checkinDate, LocalDate checkoutDate) {
	    User user = userRepo.findById(id).orElseThrow(() -> new RuntimeException("User not found with ID: " + id));
	    if (user == null) {
	        throw new RuntimeException("User not found with ID: " + id);
	    }
	    List<Room> listRoom = roomRepo.findByRoomType(roomType);
	    Room firstRoom = listRoom.stream()
	                             .filter(room -> "Available".equals(room.getRoomStatus()))
	                             .findFirst()
	                             .orElseThrow(() -> new RuntimeException("No available room found for booking."));
	    if (firstRoom == null) {
	        throw new RuntimeException("No available room found for booking.");
	    }
	    ConcreteBookingBuilder builder = new ConcreteBookingBuilder();
	    long differenceInDays = ChronoUnit.DAYS.between(checkinDate, checkoutDate);
	    Double totalPrice = firstRoom.getRoomPrice() * differenceInDays;

	    Booking booking = builder.setRoom(firstRoom)
	                             .setUser(user)
	                             .setPaymentType(paymentType)
	                             .setBookingDate(LocalDate.now())
	                             .setCheckinDate(checkinDate)
	                             .setCheckoutDate(checkoutDate)
	                             .setStatus(paymentType.equals("Cash") ? "Waiting pay" : "payed")
	                             .setTotalPrice(totalPrice)
	                             .build();

	    firstRoom.setRoomStatus("Unavailable");
	    roomRepo.save(firstRoom);

	    return bookingRepo.save(booking);
	}


}
